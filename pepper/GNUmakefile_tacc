#
# This makefile system follows the structuring conventions
# recommended by Peter Miller in his excellent paper:
#
#	Recursive Make Considered Harmful
#	http://aegis.sourceforge.net/auug97.pdf
#
OBJDIR := obj
BINDIR := bin
PTXDIR := ptx
LIBDIR := lib
GENSRCDIR := apps_sfdl_gen
HWSRCDIR := apps_sfdl_hw

ON_TACC := 1

include flags
TOP = .

# try to infer the correct GCCPREFIX
ifndef GCCPREFIX
GCCPREFIX := 
endif

CUDA_HARDWARE := nvidia

CC	:= $(GCCPREFIX)gcc -pipe
CPP	:= $(GCCPREFIX)mpicxx -pipe
AS	:= $(GCCPREFIX)as
AR	:= $(GCCPREFIX)ar rcs
LD	:= $(GCCPREFIX)ld
OBJCOPY	:= $(GCCPREFIX)objcopy
OBJDUMP	:= $(GCCPREFIX)objdump
NM	:= $(GCCPREFIX)nm
NVCC    := nvcc

# Native commands
NCC	:= gcc $(CC_VER) -pipe
TAR	:= gtar
PERL	:= perl
PYTHON := python2

CHECKER := $(PYTHON) cpplint.py --verbose 5 

# Compiler flags
CFLAGS := $(CFLAGS) -I$(TOP) -MD -m64 -DNDEBUG
CFLAGS += -Wall -Wno-format -Wno-unused -fopenmp -openmp -O2
CFLAGS += -DNUM_PROVERS_MAX=$(NUM_PROVERS_MAX)
MPI_CFLAGS := -wd10006 -wd10156 -wd186 -wd424 -wd1599 -wd186 -wd981 -wd2259 -wd444 -wd383 -wd1418 -wd271 -wd1572

# DB flags
ifeq ($(DB_HASH_FUNC),null)
CFLAGS += -DDB_HASH_FUNC_IS_NULL
endif
CFLAGS += -DDB_NUM_ADDRESSES=$(DB_NUM_ADDRESSES) -DDB_HASH_NUM_BITS=$(DB_HASH_NUM_BITS)
CFLAGS += -DRAM_CELL_NUM_BITS=$(RAM_CELL_NUM_BITS)

CFLAGS += -DMIE_ATE_USE_GMP

# Add -fno-stack-protector if the option exists.
CFLAGS += $(shell $(CC) -fno-stack-protector -E -x c /dev/null >/dev/null 2>&1 && echo -fno-stack-protector)
CFLAGS += -DON_TACC
CFLAGS += -DSCRATCH_FOLDER=\"$(SCRATCH_FOLDER)\"

CUDA_CFLAGS := --use_fast_math -DMP_USE_64BIT=1 -gencode arch=compute_20,code=sm_20 -DON_TACC
CUDA_IFLAGS := -I/usr/local/cuda/include -I/home/$(USER)/NVIDIA_GPU_Computing_SDK/C/common/inc -I/home/$(USER)/openssl/include

TACC_IFLAGS := \
    -I${TACC_CUDA_DIR}/include -I${TACC_CUDASDK_DIR}/common/inc -I${HOME}/pkg/pbc/include/pbc \
    -I${HOME}/pkg/ntl/include -I${HOME}/pkg/papi/include -I${HOME}/pkg/gmp/5.0.5/include \
    -I${HOME}/pkg/gmpmee/0.1.5/include -I${HOME}/pkg/chacha -I${TACC_BOOST_INC} \
    -I${HOME}/pkg/kyotocabinet/include -I${HOME}/pkg/fcgi/2.4.0/include -I${HOME}/pkg/encrypt \
    -I${HOME}/pkg/libconfig/1.4.8/include -I${HOME}/pkg/openssl/1.0.0/include

ifeq ($(BUILD_MYSQL_MICRO), 1)
TACC_IFLAGS += -I${HOME}/pkg/mysql/include
endif
TACC_IFLAGS += -I/${HOME}/pkg/libzm/include
TACC_IFLAGS += -I/${HOME}/pkg/leveldb/include

# Common linker flags
LDFLAGS := #-L/usr/local/lib -lm -lgmp -lfcgi -lgomp -lcurl -lconfig++ -lgmpmee -lntl -lgmp
LDFLAGS += #-L/usr/local/lib/chacha -lchacha
TACC_LDFLAGS := \
    -L${HOME}/pkg/papi/lib -L${HOME}/pkg/pbc/lib -L${HOME}/pkg/ntl/lib \
    -L${HOME}/pkg/gmp/5.0.5/lib -L${HOME}/pkg/gmpmee/0.1.5 -L${HOME}/pkg/chacha \
    -L${HOME}/pkg/fcgi/2.4.0/lib -L${HOME}/pkg/encrypt -L${HOME}/pkg/libconfig  \
    ${HOME}/pkg/chacha/libchacha.a \
    ${HOME}/pkg/fcgi/2.4.0/lib/libfcgi.a ${HOME}/pkg/fcgi/2.4.0/lib/libfcgi++.a \
    ${HOME}/pkg/libconfig/1.4.8/lib/libconfig.a ${HOME}/pkg/libconfig/1.4.8/lib/libconfig++.a \
    -L${TACC_CUDA_DIR}/lib64 \
    ${HOME}/pkg/chacha/libchacha.a \
    ${HOME}/pkg/gmp/5.0.5/lib/libgmp.a \
    ${HOME}/pkg/gmpmee/0.1.5/lib/libgmpmee.a -L${TACC_CUDALIB} -L${HOME}/pkg/openssl/1.0.0/lib \
    -L${HOME}/pkg/kyotocabinet/lib -lssl -lcrypto -lpapi -lntl -lpbc -lkyotocabinet

ifeq ($(BUILD_MYSQL_MICRO), 1)
TACC_LDFLAGS += -L${HOME}/pkg/mysql/lib -lmysqlclient
endif
TACC_LDFLAGS += -lgmpxx

TACC_LDFLAGS += -L/${HOME}/pkg/libzm/lib/ -lzm
TACC_LDFLAGS += -L/${HOME}/pkg/leveldb/lib/ -lleveldb

ifeq ($(USE_GPU), 1) 
CUDA_LIBS := -L/usr/lib/nvidia-current -lcudart -lcuda
TACC_LDFLAGS += -lcudart -lcuda
CFLAGS += -DUSE_GPU=1
else
CFLAGS += -DUSE_GPU=0
endif

# common include flags
IFLAGS := -I./include -I/usr/include -I/usr/local/include -pthread

ifeq ($(USE_GPU), 1) 
CUDA_LDFLAGS := #-L/usr/local/cuda/lib64 -L/usr/lib/nvidia-current -lcudart -lcuda -lssl -lcrypto
endif

GCC_LIB := $(shell $(CC) $(CFLAGS) -print-libgcc-file-name)

# Lists that the */Makefrag makefile fragments will add to
OBJDIRS :=

# Make sure that 'all' is the first target
all:

# Target to build and run test code
test: 

# Eliminate default suffix rules
.SUFFIXES:

# Delete target files if there is an error (or make is interrupted)
.DELETE_ON_ERROR:

# make it so that intermediate .o files and generated source files are not deleted
.PRECIOUS: %.o $(OBJDIR)/%.o $(GENSRCFILES) 

# Set to nothing (i.e., V = ) to enable verbose outputs.
V = @ 

MAKEFILE_DEP_LINE = $@: GNUmakefile $(wildcard $(dir $<)Makefrag)

# Include Makefrags for subdirectories
include common/Makefrag
include crypto/Makefrag
include libv/Makefrag
include storage/Makefrag
include include/Makefrag
include misc/Makefrag
include net/Makefrag
include apps_tailored/Makefrag
ifeq ($(USE_GPU), 1)
include lib_gpu/Makefrag
include lib_gpu_tests/Makefrag
endif
ifneq ($(BUILD_CMT), 0)
include cmtgkr/Makefrag
endif
ifneq ($(BUILD_MIP), 0)
    include mip/Makefrag
endif
include apps_sfdl/Makefrag

APPS_TAILORED_BINS = $(patsubst apps_tailored/%.cpp, $(BINDIR)/%, $(EXEC_SRCFILES))

APPS_SFDL_BINS = $(patsubst %, $(BINDIR)/%, $(COMPUTATIONS))
MISC_BINS = $(patsubst misc/%.cpp, $(BINDIR)/%, $(MISC_SRCFILES))

COMMON_LIB_OBJFILES = \
	$(COMMON_OBJFILES) \
	$(CRYPTO_OBJFILES) \
	$(LIBV_OBJFILES) \
	$(MERKLE_OBJFILES) \
	$(INCLUDE_OBJFILES) \
	$(PROVER_OBJFILES) \
	$(VERIFIER_OBJFILES) \
	$(APPS_OBJFILES) \
	$(APPS_SFDL_OBJFILES) \

# How to build apps
$(APPS_TAILORED_BINS) : $(BINDIR)/% : $(OBJDIR)/apps_tailored/%.o $(COMMON_LIB_OBJFILES) $(APPS_TAILORED_OBJFILES)
	@mkdir -p $(@D)
	@echo + mk $@
	$(V)$(CPP) $(CFLAGS) $(IFLAGS) $(CUDA_IFLAGS) $(TACC_IFLAGS) -o $@ $^ $(LDFLAGS) $(CUDA_LDFLAGS) $(TACC_LDFLAGS) $(MPI_CFLAGS)
 

$(APPS_SFDL_BINS) : $(BINDIR)/% : $(EXAMPLES_OBJFILES) $(OBJDIR)/$(GENSRCDIR)/%.o $(COMMON_LIB_OBJFILES) 
	@mkdir -p $(@D)
	@echo + mk $@
	$(V)$(CPP) $(MPI_CFLAGS) $(CFLAGS) $(IFLAGS) $(CUDA_IFLAGS) $(TACC_IFLAGS) -o $@ $^ $(LDFLAGS) $(CUDA_LDFLAGS) $(TACC_LDFLAGS)

$(MISC_BINS) : $(BINDIR)/% : $(OBJDIR)/misc/%.o $(COMMON_LIB_OBJFILES) $(MISC_OBJFILES)
	@mkdir -p $(@D)
	@echo + mk $@
	$(V)$(CPP) $(CFLAGS) $(IFLAGS) $(CUDA_IFLAGS) $(TACC_IFLAGS) -o $@ $^ $(LDFLAGS) $(CUDA_LDFLAGS) $(TACC_LDFLAGS)

# Provers also need prover objfile.
# $(patsubst %, $(BINDIR)/%_p, $(COMPUTATION_APPS)): $(PROVER_OBJFILES)

# Verifiers also need verifier objfile.
# $(patsubst %, $(BINDIR)/%_v, $(COMPUTATION_APPS)): $(VERIFIER_OBJFILES)

all: $(APPS_SFDL_BINS) $(APPS_TAILORED_BINS) $(APPS_BINS) $(MISC_BINS)

# Run the code generation only (don't compile all the way to executables)
gensrc: $(GENSRCFILES)

computation_state:
	mkdir -p $@

run-%: $(BINDIR)/%_v $(BINDIR)/%_p computation_state
	rm -rf computation_state/*
	./run/$*.sh $(ARGS)


#
# This target informs make how our compiler works. It produces
# specially-named cpp and h files in $(GENSRCDIR) using .sfdl files.
#
$(GENSRCDIR)/%.cpp $(GENSRCDIR)/%_v.cpp $(GENSRCDIR)/%_p.cpp $(GENSRCDIR)/%_v.h $(GENSRCDIR)/%_p.h $(GENSRCDIR)/%_cons.h $(GENSRCDIR)/%_v_inp_gen.h $(GENSRCDIR)/%_v_inp_gen.cpp : apps_sfdl/%.sfdl
	@echo + compile $<
	@mkdir -p $(GENSRCDIR)
	@mkdir -p $(BINDIR)
	#@cd ../codegen/; \
	#./compiler.sh -f ../pepper/$< \
	#	      -d ../pepper \
	#	      -b $(BUGGINESS) \
	#	      -t $(FRAMEWORK) \
	#	      -w $(COMPILER_WINDOW_SIZE) \
	#	      $(SFDL_CARGS) \
	#	      -prefix $(patsubst apps_sfdl/%.sfdl,$(GENSRCDIR)/%,$<) \

$(OBJDIR)/%.o: %.cu
	@echo + nvcc $<
	@mkdir -p $(@D)
	$(V)$(NVCC) $(CUDA_CFLAGS) $(CUDA_IFLAGS) $(TACC_IFLAGS) -c $< -o $@
	$(V)$(NVCC) $(CUDA_CFLAGS) $(CUDA_IFLAGS) $(TACC_IFLAGS) -M $< | sed 's/^$(notdir $*).o/$(subst /,\/,$@)/g' > $(@:o=d)
	$(V)echo "$(MAKEFILE_DEP_LINE)" >> $(@:o=d)

$(OBJDIR)/%.o: %.cpp
	@echo + cpp $<
	@mkdir -p $(@D)
	$(V)$(CPP) $(CFLAGS) -DMP_USE_64BIT $(IFLAGS) $(CUDA_IFLAGS) $(TACC_IFLAGS) $(MPI_CFLAGS) -c $< -o $@
	$(V)echo "$(MAKEFILE_DEP_LINE)" >> $(@:o=d)

# How to build vanilla binaries.
$(BINDIR)/%: $(OBJDIR)/%.o 
	@echo + mk $@
	@mkdir -p $(@D)
	$(V)$(CPP) $(CFLAGS) $(IFLAGS) $(CUDA_IFLAGS) $(TACC_IFLAGS) -o $@ $^ $(LDFLAGS) $(CUDA_LDFLAGS) $(TACC_LDFLAGS) $(MPI_CFLAGS)
	
# For running binaries.
run-%: $(BINDIR)/%
	./$(BINDIR)/$*

# For deleting the build
clean: clean-gensrc
	rm -rf $(LIBDIR) $(OBJDIR) $(BINDIR) $(PTXDIR) computation_state/*
	rm -f ../codegen/*circuit*
	rm -f ../codegen/*spec*

clean-gensrc: 
	rm -rf $(GENSRCDIR)
	
# This magic automatically generates makefile dependencies
# for header files included from C source files we compile,
# and keeps those dependencies up-to-date every time we recompile.
# See 'mergedep.pl' for more information.
$(OBJDIR)/.deps: $(foreach dir, $(OBJDIRS), $(wildcard $(OBJDIR)/$(dir)/*.d))
	@mkdir -p $(@D)
	@$(PERL) mergedep.pl $@ $^

-include $(OBJDIR)/.deps

always: 
	@:

.PHONY: always
