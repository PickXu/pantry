/*
 * Bisection method applied to finding the roots of a degree two polynomial
 */
program bisect_sfdl {
  //Compiler is picky. First define your constants:
  const m = 256;
  const L = 8;

  //Now your type definitions:
  type iterator = float; //The type of loop iterators is ignored
  type Input = struct{float<32,5>[m] a, float<32,5>[m] b};
  type Output = struct {float[m] Ya, float[m] Yb};

  //Now functions
  function float fAtMidpt(float[m] a, float[m] b){
    var iterator i;
    var iterator j;
    var float f;
    f = 0;
    for (i = 0 to m-1) {
      f = f + FUNCTION_STATIC_RANDOM_INT(31)*(a[i] + b[i]);
    }

    f = 2 * f;

    for (i = 0 to m-1) {
      for (j = 0 to m-1) { 
        f = f + FUNCTION_STATIC_RANDOM_INT(31)*(a[i] + b[i])*(a[j] + b[j]);
      }
    }

    f = 1/4 * f;
    fAtMidpt = f;
  }

  //Now the main method, which must be called "output"
  function Output output (Input X){
    var iterator i;
    var iterator j;
    var float[m] a;
    var float[m] b;

    a = X.a;
    b = X.b;

    for (i = 0 to L-1) {
      if (fAtMidpt(a, b) > 0) {
        for (j = 0 to m-1) {
          b[j] = 1/2*(a[j] + b[j]);
        }
      } else {
        for (j = 0 to m-1) {
          a[j] = 1/2*(a[j] + b[j]);
        }
      }
    }

    output.Ya = a;
    output.Yb = b;
  }
}
