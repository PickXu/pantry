\#include <${output_prefix}_p.h>
\#include <${output_prefix}_v.h>


bool MICROBENCHMARKS = 0;

// driver to run the phases of the verifier
int main(int argc, char **argv)
{
  int batch_size;
  int num_repetitions;
  int num_inputs;
  int num_outputs;
  int num_cons;
  int num_vars;
  char prover_url[BUFLEN];
  char actor;
  int phase;
  int num_aij, num_bij, num_cij;

  parse_args(argc, argv, &actor, &phase, &batch_size, &num_repetitions, &num_inputs,
    prover_url);
  int optimize_answers = 1;
  
  ${comp_parameters}

\#ifdef INTERFACE_MPI

  MPI_Init(&argc, &argv);
  int rank;
  MPI_Comm_rank(MPI_COMM_WORLD, &rank);

  if (rank == 0) {  // verifier
    ${computation_classname}Verifier verifier(batch_size, num_repetitions,
      optimize_answers, prover_url, num_inputs, num_outputs, num_vars,
      num_cons, file_name_f1_index);
    verifier.begin_pepper();
  } else {  // prover
    ${computation_classname}Prover prover(0 /*phase*/, batch_size,
    num_repetitions, num_inputs, num_outputs, num_vars, num_cons,
    file_name_f1_index);
    prover.handle_requests();
  }

\#else
  if (actor == 'v') {
    ${computation_classname}Verifier verifier(batch_size, num_repetitions,
      optimize_answers, prover_url, num_inputs, num_outputs, num_vars,
      num_cons, file_name_f1_index);          
 
    verifier.begin_pepper();
  } else {
    if (argc > 2) {
      ${computation_classname}Prover prover(phase, batch_size,
      num_repetitions, num_inputs, num_outputs, num_vars, num_cons,
      file_name_f1_index);
      prover.handle_terminal_request();
    }
    else {
      phase = 0;
      batch_size = 100;
      num_repetitions = 70;
      num_inputs = 1000;

      ${computation_classname}ProverExo prover(phase, batch_size,
      num_repetitions, file_name_f1_index);
      prover.handle_http_requests();
    }
  }
\#endif

  return 0;
}

